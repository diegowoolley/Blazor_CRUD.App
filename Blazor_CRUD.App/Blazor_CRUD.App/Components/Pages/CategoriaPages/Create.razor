@page "/categoria/create"
@using Microsoft.EntityFrameworkCore
@using Blazor_CRUD.App.Data
@inject IDbContextFactory<Blazor_CRUD.App.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Adicionar Categoria</PageTitle>

<h1>

    <img src="5445496.png" alt="Adicionar Categoria"  height="50" width="50"/>

</h1>

<div class="card shadow-lg mb-4">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0">Adicionar nova Categoria</h5>
    </div>
    <div class="card-body">
        <EditForm method="post" Model="Categoria" OnValidSubmit="AddCategoria" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="nome" class="form-label">Nome:</label>
                <InputText id="nome" @bind-Value="Categoria.Nome" class="form-control" />
                <ValidationMessage For="() => Categoria.Nome" class="text-danger" />
            </div>
            <div class=" card-footer text-end">
                <button type="submit" class="btn me-3" title="Salvar Alterações">
                    <img src="savedisk_floppydisk_guardar_1543.png" alt="Salvar" height="30" width="30" />
                </button>
                <a class="btn me-3" href="/categoria" title="Voltar para a Lista">
                    <img src="go-back256_24856.png" alt="Voltar para a Lista" height="30" width="30" />
                </a>
            </div>
        </EditForm>
    </div>
</div>



@code {
    [SupplyParameterFromForm]
    private Categoria Categoria { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddCategoria()
    {
        using var context = DbFactory.CreateDbContext();
        context.Categoria.Add(Categoria);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/categoria");
    }
}
