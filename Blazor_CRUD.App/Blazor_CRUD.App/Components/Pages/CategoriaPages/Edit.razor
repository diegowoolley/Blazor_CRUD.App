@page "/categoria/edit"
@using Microsoft.EntityFrameworkCore
@using Blazor_CRUD.App.Data
@inject IDbContextFactory<Blazor_CRUD.App.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Editar Categoria</PageTitle>



<h2>

    <img src="documentediting_editdocuments_text_documentedi_2820.png" alt="Editar Categoria" height="50" width="50" />

</h2>

@if (Categoria is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="card shadow-lg mb-4">
        <div class="card-header bg-warning text-white">
            <h5 class="mb-0">Editar Categoria</h5>
        </div>
        <div class="card-body">
            <EditForm method="post" Model="Categoria" OnValidSubmit="UpdateCategoria" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert" />
                <input type="hidden" name="Categoria.Id" value="@Categoria.Id" />

                <div class="mb-3">
                    <label for="nome" class="form-label">Nome:</label>
                    <InputText id="nome" @bind-Value="Categoria.Nome" class="form-control" />
                    <ValidationMessage For="() => Categoria.Nome" class="text-danger" />
                </div>

                <div class="d-flex justify-content-end">
                    <button type="submit" class="btn me-3" title="Salvar Alterações">

                        <img src="savedisk_floppydisk_guardar_1543.png" alt="Salvar Categoria" height="30" width="30" />

                    </button>
                    <a href="/categoria" class="btn me-3" title="Voltar para a Lista">
                        
                    <img src="go-back256_24856.png" alt="Voltar para a Lista" />
                    
                    </a>
                </div>
            </EditForm>
        </div>
    </div>

}


@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Categoria? Categoria { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Categoria ??= await context.Categoria.FirstOrDefaultAsync(m => m.Id == Id);

        if (Categoria is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateCategoria()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Categoria!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CategoriaExists(Categoria!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/categoria");
    }

    private bool CategoriaExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Categoria.Any(e => e.Id == id);
    }
}
