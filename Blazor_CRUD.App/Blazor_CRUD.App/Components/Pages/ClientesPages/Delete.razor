@page "/clientes/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorCRUD.App.Data
@inject IDbContextFactory<Blazor_CRUD.App.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Remover Cliente</PageTitle>

<h1>

    <img src="Remove_User-80_icon-icons.com_57283.png" alt="Remover Cliente" height="50" width="50" />

</h1>

<p>Deseja mesmo remover esse cliente?</p>
<div>
    
  
    @if (clientes is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <div class="card shadow-lg mb-4">
            <div class="card-header bg-danger text-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0">Remover Cliente</h5>
                @if (clientes.Foto == null)
                {
                    <img src="SemFoto.png" alt="Foto do cliente" class="img-thumbnail" style="max-width: 80px;" />
                }
                else
                {
                    <img src="@clientes.Foto" alt="Foto do cliente" class="img-thumbnail" style="max-width: 80px;" />
                }
            </div>
            <div class="card-body">
                <dl class="row">
                    <dt class="col-sm-2">Nome:</dt>
                    <dd class="col-sm-10">@clientes.Nome</dd>
                </dl>
                <dl class="row">
                    <dt class="col-sm-2">Documento:</dt>
                    <dd class="col-sm-10">@clientes.Documento</dd>
                </dl>
                <dl class="row">
                    <dt class="col-sm-2">Email:</dt>
                    <dd class="col-sm-10">@clientes.email</dd>
                </dl>
                <dl class="row">
                    <dt class="col-sm-2">Cep:</dt>
                    <dd class="col-sm-10">@clientes.cep</dd>
                </dl>
                <dl class="row">
                    <dt class="col-sm-2">Endereço:</dt>
                    <dd class="col-sm-10">@clientes.endereco</dd>
                </dl>
                <dl class="row">
                    <dt class="col-sm-2">Bairro:</dt>
                    <dd class="col-sm-10">@clientes.bairro</dd>
                </dl>
                <dl class="row">
                    <dt class="col-sm-2">Número:</dt>
                    <dd class="col-sm-10">@clientes.numero</dd>
                </dl>
                <dl class="row">
                    <dt class="col-sm-2">Cidade:</dt>
                    <dd class="col-sm-10">@clientes.cidade</dd>
                </dl>
                <dl class="row">
                    <dt class="col-sm-2">UF:</dt>
                    <dd class="col-sm-10">@clientes.uf</dd>
                </dl>
                <dl class="row">
                    <dt class="col-sm-2">Telefone:</dt>
                    <dd class="col-sm-10">@clientes.telefone</dd>
                </dl>
                <dl class="row">
                    <dt class="col-sm-2">Celular:</dt>
                    <dd class="col-sm-10">@clientes.celular</dd>
                </dl>
                             
            </div>
            <div class="card-footer text-end">
                <EditForm method="post" Model="clientes" OnValidSubmit="DeleteClientes" FormName="delete" Enhance>
                    <button type="submit" class="btn me-3" disabled="@(clientes is null)" title="Remover">
                        <img src="Remove_User-80_icon-icons.com_57283.png" alt="Remover cliente" height="30" width="30" />
                    </button>
                    <a href="/clientes" title="Voltar para a Lista">
                        <img src="go-back256_24856.png" alt="Voltar a Lista" height="30" width="30" />
                    </a>
                </EditForm>
            </div>
        </div>

    }
</div>

@code {
    private Clientes? clientes;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        clientes = await context.Clientes.FirstOrDefaultAsync(m => m.Id == Id);

        if (clientes is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteClientes()
    {
        using var context = DbFactory.CreateDbContext();
        context.Clientes.Remove(clientes!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/clientes");
    }
}
