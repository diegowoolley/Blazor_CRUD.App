@page "/clientes/delete"
@using Microsoft.EntityFrameworkCore
@using BlazorCRUD.App.Data
@inject IDbContextFactory<Blazor_CRUD.App.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>

    <img src="Remove_User-80_icon-icons.com_57283.png" alt="Remover Cliente" height="50" width="50"/>

</h1>

<p>Deseja mesmo remover esse cliente?</p>
<div>
    
    <hr />
    @if (clientes is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Nome</dt>
            <dd class="col-sm-10">@clientes.Nome</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Documento</dt>
            <dd class="col-sm-10">@clientes.Documento</dd>
        </dl>
        <EditForm method="post" Model="clientes" OnValidSubmit="DeleteClientes" FormName="delete" Enhance>
            <button type="submit" class="btn" disabled="@(clientes is null)">

                <img src="Remove_User-80_icon-icons.com_57283.png" alt="Remover cliente" height="30" width="30" />

            </button>
            <a href="/clientes">                
            
            <img src="go-back256_24856.png" alt="Voltar a Lista" height="30" width="30"/>
            
            </a>
        </EditForm>
    }
</div>

@code {
    private Clientes? clientes;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        clientes = await context.clientes.FirstOrDefaultAsync(m => m.Id == Id);

        if (clientes is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteClientes()
    {
        using var context = DbFactory.CreateDbContext();
        context.clientes.Remove(clientes!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/clientes");
    }
}
